"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const csvParser = require("fast-csv");
const path = require("path");
const s3 = new client_s3_1.S3Client({});
const BUCKET_NAME = process.env.BUCKET_NAME || '';
const METADATA_FILE_KEY = 'metadata/metadata.csv'; // Fixed location for metadata.csv
/**
 * Helper function to read the content of an S3 object.
 */
async function getObject(bucket, key) {
    const command = new client_s3_1.GetObjectCommand({ Bucket: bucket, Key: key });
    const response = await s3.send(command);
    const stream = response.Body;
    return new Promise((resolve, reject) => {
        let data = '';
        stream.on('data', chunk => (data += chunk));
        stream.on('end', () => resolve(data));
        stream.on('error', err => reject(err));
    });
}
/**
 * Helper function to upload content to S3.
 */
async function putObject(bucket, key, data) {
    const command = new client_s3_1.PutObjectCommand({
        Bucket: bucket,
        Key: key,
        Body: data,
        ContentType: 'text/csv',
    });
    await s3.send(command);
}
/**
 * AWS Lambda handler to process S3 events.
 */
const handler = async (event) => {
    for (const record of event.Records) {
        const audioFileKey = record.s3.object.key;
        // Metadata extraction: filename, upload timestamp, and client ID
        const newMetadata = {
            FileName: path.basename(audioFileKey), // Extract filename
            UploadTimestamp: new Date().toISOString(), // Upload timestamp
            ClientID: getClientID(audioFileKey), // Extract client ID from the file path
        };
        let rows = [];
        const headers = ['FileName', 'UploadTimestamp', 'ClientID'];
        // Fetch existing metadata.csv file, if it exists
        try {
            const metadataCsv = await getObject(BUCKET_NAME, METADATA_FILE_KEY);
            // Parse existing CSV content
            await new Promise((resolve, reject) => {
                csvParser
                    .parseString(metadataCsv, { headers: true })
                    .on('data', row => {
                    // Only add valid rows
                    if (row.FileName && row.UploadTimestamp && row.ClientID) {
                        rows.push(row);
                    }
                })
                    .on('end', resolve)
                    .on('error', reject);
            });
        }
        catch (err) {
            if (err.name === 'NoSuchKey') {
                console.log('metadata.csv does not exist yet. Creating a new file.');
            }
            else {
                console.error('Error fetching metadata.csv:', err);
                throw err;
            }
        }
        // Check for duplicates and append new metadata
        const isDuplicate = rows.some(row => row.FileName === newMetadata.FileName &&
            row.UploadTimestamp === newMetadata.UploadTimestamp &&
            row.ClientID === newMetadata.ClientID);
        if (!isDuplicate) {
            rows.push(newMetadata);
        }
        // Convert rows to CSV format with fixed headers
        const csvStream = csvParser.format({ headers });
        const output = [];
        csvStream.on('data', chunk => output.push(chunk.toString()));
        rows.forEach(row => csvStream.write(row));
        csvStream.end();
        // Upload the updated metadata.csv to S3
        const updatedCsv = output.join('');
        await putObject(BUCKET_NAME, METADATA_FILE_KEY, updatedCsv);
        console.log(`Metadata updated for file: ${audioFileKey}`);
    }
};
exports.handler = handler;
/**
 * Helper function to extract client ID from the file path.
 */
function getClientID(filePath) {
    // Assuming the client ID is part of the file path, e.g., "audiofiles/client1/filename.mp3"
    const parts = filePath.split('/');
    return parts.length > 1 ? parts[1] : 'UnknownClient';
}
//# sourceMappingURL=data:application/json;base64,